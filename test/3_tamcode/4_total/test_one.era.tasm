           PUSH         1              ; push variable i on the stack
           LOADL        0              ; load init value of i
           STORE(1)     0[SB]          ; store in variable i
           PUSH         1              ; push constant a on the stack - constants need to be here too :-(
           LOADL        121            ; load literal value 121 representing 'y'
           STORE(1)     1[SB]          ; store in variable a
           LOAD(1)      0[SB]          ; load the variable i
           LOADA        -1[ST]         ; load address of int on top of stack
           LOADI(1)                    ; get the int on the stack, again, for printing
           CALL         putint         ; print the integer value of 
           CALL         puteol         ; put a newline
           LOAD(1)      1[SB]          ; load the constant a
           LOADA        -1[ST]         ; load address of char on top of stack
           LOADI(1)                    ; get the char on the stack, again, for printing
           CALL         put            ; print the character 
           CALL         puteol         ; put a newline
           POP(0)       2              ; pop the resulting value of print
           PUSH         1              ; push variable d on the stack
           LOADL        0              ; load init value of d
           STORE(1)     2[SB]          ; store in variable d
           LOADL        5              ; load literal value 5
           STORE(1)     2[SB]          ; store in variable d
           LOAD(1)      2[SB]          ; load the variable d on the stack
           POP(1)       0              ; pop 0 local variables on closing a scope
           POP(0)       1              ; pop the resulting value of indent dsb cleanup
           LOAD(1)      2[SB]          ; load the variable d
           LOADL        2              ; load literal value 2
           CALL         sub            ; subtract the top entries of the stack from eachother
           STORE(1)     2[SB]          ; store in variable d
           LOAD(1)      2[SB]          ; load the variable d on the stack
           POP(1)       1              ; pop 1 local variables on closing a scope
           STORE(1)     0[SB]          ; store in variable i
           LOAD(1)      0[SB]          ; load the variable i on the stack
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           LOAD(1)      0[SB]          ; load the variable i
           LOADA        -1[ST]         ; load address of int on top of stack
           LOADI(1)                    ; get the int on the stack, again, for printing
           CALL         putint         ; print the integer value of 
           CALL         puteol         ; put a newline
           LOADL        2              ; load literal value 2
           CALL         add            ; add up the entries on the top of the stack
           STORE(1)     0[SB]          ; store in variable i
           LOAD(1)      0[SB]          ; load the variable i on the stack
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           PUSH         1              ; push constant b on the stack - constants need to be here too :-(
           LOADL        10             ; load literal value 10
           STORE(1)     2[SB]          ; store in variable b
           LOAD(1)      0[SB]          ; load the variable i
           LOAD(1)      2[SB]          ; load the constant b
           LOADL        6              ; load literal value 6
           CALL         sub            ; subtract the top entries of the stack from eachother
           CALL         lt             ; less than statement
           JUMPIF(0)    ELSE11[CB]     ; jump to the else clause
           LOAD(1)      1[SB]          ; load the constant a
           LOADA        -1[ST]         ; load address of char on top of stack
           LOADI(1)                    ; get the char on the stack, again, for printing
           CALL         put            ; print the character 
           CALL         puteol         ; put a newline
           POP(1)       0              ; pop 0 local variables on closing a scope
           JUMP         ENDIF11[CB]    ; jump past the else clause
ELSE11:    PUSH         1              ; push variable c on the stack
           LOADL        0              ; load init value of c
           STORE(1)     3[SB]          ; store in variable c
           LOADL        10             ; load literal value 10
           STORE(1)     3[SB]          ; store in variable c
           LOAD(1)      3[SB]          ; load the variable c on the stack
           POP(0)       1              ; pop the resulting value of exprelse cleanup
           LOADL        100            ; load literal value 100
           LOAD(1)      3[SB]          ; load the variable c
           CALL         add            ; add up the entries on the top of the stack
           STORE(1)     0[SB]          ; store in variable i
           LOAD(1)      0[SB]          ; load the variable i on the stack
           POP(1)       1              ; pop 1 local variables on closing a scope
ENDIF11:   POP(1)       0              ; pop 0 local variables on closing a scope
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           LOAD(1)      0[SB]          ; load the variable i
           LOADA        -1[ST]         ; load address of int on top of stack
           LOADI(1)                    ; get the int on the stack, again, for printing
           CALL         putint         ; print the integer value of 
           CALL         puteol         ; put a newline
           LOAD(1)      1[SB]          ; load the constant a
           LOADA        -1[ST]         ; load address of char on top of stack
           LOADI(1)                    ; get the char on the stack, again, for printing
           CALL         put            ; print the character 
           CALL         puteol         ; put a newline
           POP(0)       2              ; pop the resulting value of print
           LOAD(1)      2[SB]          ; load the constant b
           LOADA        -1[ST]         ; load address of int on top of stack
           LOADI(1)                    ; get the int on the stack, again, for printing
           CALL         putint         ; print the integer value of 
           CALL         puteol         ; put a newline
           POP(0)       1              ; pop the resulting value of print
           LOAD(1)      2[SB]          ; load the constant b
           LOAD(1)      0[SB]          ; load the variable i
           CALL         gt             ; greater than statement
           JUMPIF(0)    ELSE12[CB]     ; jump to the else clause
           LOAD(1)      2[SB]          ; load the constant b
           LOADL        2              ; load literal value 2
           CALL         sub            ; subtract the top entries of the stack from eachother
           STORE(1)     0[SB]          ; store in variable i
           LOAD(1)      0[SB]          ; load the variable i on the stack
           POP(1)       0              ; pop 0 local variables on closing a scope
           JUMP         ENDIF12[CB]    ; jump past the else clause
ELSE12:    PUSH         1              ; push variable help on the stack
           LOADL        0              ; load init value of help
           STORE(1)     3[SB]          ; store in variable help
WHILE0:    LOAD(1)      0[SB]          ; load the variable i
           LOADL        100            ; load literal value 100
           CALL         gt             ; greater than statement
           JUMPIF(0)    ENDWHILE0[CB]  ; jump past the while body
           LOAD(1)      0[SB]          ; load the variable i
           LOADL        8              ; load literal value 8
           CALL         mod            ; modulus of the two top entries on the stack
           LOAD(1)      3[SB]          ; load the variable help
           CALL         add            ; add up the entries on the top of the stack
           STORE(1)     3[SB]          ; store in variable help
           LOAD(1)      3[SB]          ; load the variable help on the stack
           POP(0)       1              ; pop the resulting value of exprdo cleanup
           LOAD(1)      0[SB]          ; load the variable i
           LOADL        1              ; load literal value 1
           CALL         sub            ; subtract the top entries of the stack from eachother
           STORE(1)     0[SB]          ; store in variable i
           LOAD(1)      0[SB]          ; load the variable i on the stack
           POP(0)       1              ; pop the resulting value of exprdo cleanup
           POP(0)       0              ; pop 0 local variables on closing a scope
           JUMP         WHILE0[CB]     ; jump to the while
ENDWHILE0: POP(0)       0              ; pop 0 local variables on closing a scope
           LOAD(1)      3[SB]          ; load the variable help
           LOADA        -1[ST]         ; load address of int on top of stack
           LOADI(1)                    ; get the int on the stack, again, for printing
           CALL         putint         ; print the integer value of 
           CALL         puteol         ; put a newline
           POP(1)       1              ; pop 1 local variables on closing a scope
ENDIF12:   POP(1)       0              ; pop 0 local variables on closing a scope
           STORE(1)     0[SB]          ; store in variable i
           LOAD(1)      0[SB]          ; load the variable i on the stack
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           PUSH         1              ; push variable d on the stack
           LOADL        0              ; load init value of d
           STORE(1)     3[SB]          ; store in variable d
           LOAD(1)      3[SB]          ; load the variable d
           CALL         not            ; negate the statement
           JUMPIF(0)    ELSE13[CB]     ; jump to the else clause
           LOAD(1)      3[SB]          ; load the variable d
           CALL         not            ; negate the statement
           STORE(1)     3[SB]          ; store in variable d
           LOAD(1)      3[SB]          ; load the variable d on the stack
           POP(1)       0              ; pop 0 local variables on closing a scope
           JUMP         ENDIF13[CB]    ; jump past the else clause
ELSE13:    JUMP         ENDIF13[CB]    ; jump to the end
ENDIF13:   POP(1)       0              ; pop 0 local variables on closing a scope
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           LOAD(1)      3[SB]          ; load the variable d
           LOADA        -1[ST]         ; load address of int on top of stack
           LOADI(1)                    ; get the int on the stack, again, for printing
           CALL         putint         ; print the integer value of 
           CALL         puteol         ; put a newline
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           LOADL        5              ; load literal value 5
           LOADL        6              ; load literal value 6
           CALL         lt             ; less than statement
           LOAD(1)      0[SB]          ; load the variable i
           LOAD(1)      2[SB]          ; load the constant b
           CALL         gt             ; greater than statement
           CALL         and            ; and the values on the top of the stack with eachother
           STORE(1)     3[SB]          ; store in variable d
           LOAD(1)      3[SB]          ; load the variable d on the stack
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           LOAD(1)      3[SB]          ; load the variable d
           LOADA        -1[ST]         ; load address of int on top of stack
           LOADI(1)                    ; get the int on the stack, again, for printing
           CALL         putint         ; print the integer value of 
           CALL         puteol         ; put a newline
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           POP(0)       4              ; free 4 variables at end of program
           HALT                        ; ends the program
