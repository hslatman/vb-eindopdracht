; source file: C:\Users\Herman\Development\Java\eclipse_workspace\VertalerbouwEindopdracht3\test\3_runtime\basic\read_four_numbers.era
; output file: C:\Users\Herman\Development\Java\eclipse_workspace\VertalerbouwEindopdracht3\test\3_runtime\basic\Read_four_numbers.jasm
; creation date: Tue Jun 25 16:55:44 CEST 2013

	
.source Read_four_numbers.jasm
.class public Read_four_numbers
.super java/lang/Object
	
; standard class initializer
.method public <init>()V
	aload_0
	invokenonvirtual java/lang/Object/<init>()V
	return
.end method

.method public static main([Ljava/lang/String;)V
	.limit locals 4
	.limit stack 12


	; 'start' of generated code

	ldc 0
	istore 0
	ldc 0
	istore 1
	ldc 0
	istore 2
	ldc 0
	istore 3
	invokestatic Read_four_numbers.readint()I
	istore 0
	iload 0
	invokestatic Read_four_numbers.readint()I
	istore 1
	iload 1

	; pop 2 values from the stack for cleaning up read
	pop
	pop
	invokestatic Read_four_numbers.readint()I
	istore 2
	iload 2

	; pop 1 value from the stack for cleaning up read
	pop
	invokestatic Read_four_numbers.readint()I
	istore 3
	iload 3

	; pop 1 value from the stack for cleaning up read
	pop

	; loading of a variable/constant
	iload 3
	dup

	; push reference to system.out on stack
	getstatic java/lang/System/out Ljava/io/PrintStream;
	swap

	; print the output
	invokevirtual java/io/PrintStream/println(I)V
	

	; loading of a variable/constant
	iload 2
	dup

	; push reference to system.out on stack
	getstatic java/lang/System/out Ljava/io/PrintStream;
	swap

	; print the output
	invokevirtual java/io/PrintStream/println(I)V
	

	; pop 2 values from the stack for cleaning up print
	pop
	pop

	; loading of a variable/constant
	iload 1
	dup

	; push reference to system.out on stack
	getstatic java/lang/System/out Ljava/io/PrintStream;
	swap

	; print the output
	invokevirtual java/io/PrintStream/println(I)V
	

	; pop 1 value from the stack for cleaning up print
	pop

	; loading of a variable/constant
	iload 0
	dup

	; push reference to system.out on stack
	getstatic java/lang/System/out Ljava/io/PrintStream;
	swap

	; print the output
	invokevirtual java/io/PrintStream/println(I)V
	

	; pop 1 value from the stack for cleaning up print
	pop




	; 'end' of generated code
	return
.end method
	
; int readint() function
.method public static readint()I
	.limit locals 2
	.limit stack 10
	ldc 0
	istore 0

LabelRead0:
	getstatic java/lang/System/in Ljava/io/InputStream;
	invokevirtual java/io/InputStream/read()I
	istore 1
	iload 1
	ldc 10
	isub
	ifeq LabelRead1
	iload 1
	ldc 13
	isub
	ifeq LabelRead1
	iload 1
	ldc 32
	isub
	ifeq LabelRead1
	iload 1
	ldc 48
	isub
	ldc 10
	iload 0
	imul
	iadd
	istore 0
	goto LabelRead0

LabelRead1:
	; local variable 0 now holds the entire integer
	iload 0
	ireturn
	
.end method
