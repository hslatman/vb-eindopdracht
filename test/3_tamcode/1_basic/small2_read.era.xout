           PUSH         1              ; push variable a on the stack
           LOADL        0              ; load init value of a
           STORE(1)     0[SB]          ; store in variable a
           LOADA        0[SB]          ; load the address of a
           CALL         getint         ; read a numeric value for a
           LOAD(1)      0[SB]          ; load the variable a
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           LOAD(1)      0[SB]          ; load the variable a
           LOADL        100            ; load literal value 100
           CALL         add            ; add up the entries on the top of the stack
           STORE(1)     0[SB]          ; store in variable a
           LOAD(1)      0[SB]          ; load the variable a on the stack
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           PUSH         1              ; push variable b on the stack
           LOADL        0              ; load init value of b
           STORE(1)     1[SB]          ; store in variable b
           LOADL        3              ; load literal value 3
           STORE(1)     1[SB]          ; store in variable b
           LOAD(1)      1[SB]          ; load the variable b on the stack
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           LOAD(1)      1[SB]          ; load the variable b
           LOADL        1              ; load literal value 1
           CALL         add            ; add up the entries on the top of the stack
           STORE(1)     1[SB]          ; store in variable b
           LOAD(1)      1[SB]          ; load the variable b on the stack
           POP(0)       1              ; pop the resulting value of dsb cleanup start
WHILE0:    LOAD(1)      1[SB]          ; load the variable b
           LOADL        10             ; load literal value 10
           CALL         le             ; less or equal statement
           JUMPIF(0)    ENDWHILE0[CB]  ; jump past the while body
           LOAD(1)      1[SB]          ; load the variable b
           LOADL        2              ; load literal value 2
           CALL         add            ; add up the entries on the top of the stack
           STORE(1)     1[SB]          ; store in variable b
           LOAD(1)      1[SB]          ; load the variable b on the stack
           POP(0)       1              ; pop the resulting value of exprdo cleanup
           POP(0)       0              ; pop 0 local variables on closing a scope
           JUMP         WHILE0[CB]     ; jump to the while
ENDWHILE0: POP(0)       0              ; pop 0 local variables on closing a scope
           LOAD(1)      1[SB]          ; load the variable b
           LOADA        -1[ST]         ; load address of int on top of stack
           LOADI(1)                    ; get the int on the stack, again, for printing
           CALL         putint         ; print the integer value of 
           CALL         puteol         ; put a newline
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           LOAD(1)      0[SB]          ; load the variable a
           LOAD(1)      1[SB]          ; load the variable b
           CALL         mult           ; multiplication of the top entries on the stack
           STORE(1)     0[SB]          ; store in variable a
           LOAD(1)      0[SB]          ; load the variable a on the stack
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           LOAD(1)      1[SB]          ; load the variable b
           LOADA        -1[ST]         ; load address of int on top of stack
           LOADI(1)                    ; get the int on the stack, again, for printing
           CALL         putint         ; print the integer value of 
           CALL         puteol         ; put a newline
           LOAD(1)      1[SB]          ; load the variable b
           LOADA        -1[ST]         ; load address of int on top of stack
           LOADI(1)                    ; get the int on the stack, again, for printing
           CALL         putint         ; print the integer value of 
           CALL         puteol         ; put a newline
           POP(0)       2              ; pop the resulting value of print
           LOAD(1)      0[SB]          ; load the variable a
           LOADA        -1[ST]         ; load address of int on top of stack
           LOADI(1)                    ; get the int on the stack, again, for printing
           CALL         putint         ; print the integer value of 
           CALL         puteol         ; put a newline
           POP(0)       1              ; pop the resulting value of dsb cleanup start
           POP(0)       2              ; free 2 variables at end of program
           HALT                        ; ends the program
